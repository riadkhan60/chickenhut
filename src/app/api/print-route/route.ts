import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/prisma';

// Place your logo as a base64 string here (or load from file if needed)
const LOGO_BASE64 =
  ``; // TODO: Replace with your actual base64 logo string

const STORE_NAME = 'chicken hut';
const FLASK_PRINT_URL = 'http://localhost:5000/print';
const API_KEY = 'your-secret-api-key';

export async function POST(req: NextRequest) {
  try {
    const { orderId, type } = await req.json();
    if (!orderId || !type) {
      return NextResponse.json(
        { error: 'orderId and type are required' },
        { status: 400 },
      );
    }
    if (type !== 'kitchen' && type !== 'customer') {
      return NextResponse.json(
        { error: 'type must be "kitchen" or "customer"' },
        { status: 400 },
      );
    }

    // Fetch order with items, menu items, and table
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: {
        table: true,
        orderItems: {
          include: { menuItem: true },
        },
      },
    });
    if (!order) {
      return NextResponse.json({ error: 'Order not found' }, { status: 404 });
    }

    // Build content for print
    const content: Array<Record<string, unknown>> = [];
    if (type === 'kitchen') {
      // Only item number and table name
      content.push({ type: 'header', text: 'KITCHEN ORDER' });
      content.push({
        type: 'text',
        text: `Table: ${order.isParcel ? 'Parcel' : order.table?.number || ''}`,
      });
      for (const item of order.orderItems) {
        content.push({
          type: 'text',
          text: `#${item.menuItem.itemNumber} x${item.quantity}`,
        });
      }
    } else if (type === 'customer') {
      // Logo, header, items, total, etc.
      if (LOGO_BASE64) {
        content.push({ type: 'image', data: LOGO_BASE64 });
      }
      content.push({ type: 'header', text: STORE_NAME });
      content.push({
        type: 'text',
        text: `Table: ${order.isParcel ? 'Parcel' : order.table?.number || ''}`,
      });
      content.push({ type: 'text', text: `Order #${order.id}` });
      content.push({
        type: 'text',
        text: new Date(order.createdAt).toLocaleString(),
      });
      for (const item of order.orderItems) {
        content.push({
          type: 'item',
          name: item.menuItem.name,
          quantity: item.quantity,
          price: item.price,
        });
      }
      content.push({ type: 'total', amount: order.total });
      if (order.discount && order.discount > 0) {
        content.push({
          type: 'text',
          text: `Discount: -${order.discount.toFixed(2)}`,
        });
      }
      content.push({ type: 'text', text: 'Thank you!' });
    }

    // Send to Flask print server
    const printRes = await fetch(FLASK_PRINT_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-API-KEY': API_KEY,
      },
      body: JSON.stringify({ content }),
    });
    const printData = await printRes.json();
    if (!printRes.ok) {
      return NextResponse.json(
        { error: printData.error || 'Print failed' },
        { status: 500 },
      );
    }
    return NextResponse.json({
      success: true,
      message: printData.message || 'Printed successfully',
    });
  } catch (err: unknown) {
    function hasMessage(e: unknown): e is { message: string } {
      return (
        typeof e === 'object' &&
        e !== null &&
        'message' in e &&
        typeof (e as { message: unknown }).message === 'string'
      );
    }
    let message = 'Internal server error';
    if (hasMessage(err)) {
      message = err.message;
    }
    return NextResponse.json({ error: message }, { status: 500 });
  }
}
